// WARNING:
// This file is automatically generated.
// Do not edit manually.

import {
    zBoolean,
    zDateTime,
    zEmailAddress,
    zFunctionBoolResultFromStringArraySpread,
    zHTTPMethods,
    zHumanName,
    zIpnValidationStates,
    zKeyTypes,
    zMoneyBookers,
    zNonEmptyStringArray,
    zNonNegativeNumber,
    zNumber,
    zNumberArray,
    zPasswordField,
    zPasswordInput,
    zPayPal,
    zPaymentProviders,
    zPositiveNumber,
    zStateRecord,
    zString,
    zStringArray,
    zStripe,
    zStripePaymentStates,
    zUrl,
    zUserActiveStateCodes,
    zUserActiveStateDefinition,
    zUserActiveStateTitles,
    zUserActiveStateType,
    zUserActiveStates,
    zUserBannedStateType,
    zUserInactiveStateType,
    zUserPendingStateType,
    zUserPin,
    zUserStateCodeActive,
    zUserStateCodeBanned,
    zUserStateCodeInactive,
    zUserStateCodePending,
    zUserStateTitleActive,
    zUserStateTitleBanned,
    zUserStateTitleInactive,
    zUserStateTitlePending,
    zUsername
} from '@/lib/validators/common'
import {
    zAccessLog,
    zAccessToken,
    zAppClient,
    zAuthCheckResult,
    zBasePrivilege,
    zCommon,
    zCurrentUser,
    zDataRecord,
    zDomain,
    zEmail,
    zEmailTemplate,
    zEvent,
    zGenuineCard,
    zIPrincipal,
    zIpn,
    zIpnRequest,
    zKey,
    zMembership,
    zMembershipBaseFields,
    zMembershipPeriod,
    zMembershipPeriodDay,
    zMembershipPeriodMonth,
    zMembershipPeriodYear,
    zMembershipWithId,
    zMetricServiceGetCreatedDatesResult,
    zMetricServiceGetMembersResult,
    zMetricServiceGetRevenueResult,
    zMetricServiceGroupTypes,
    zMetricsBaseRangeResult,
    zMetricsResult,
    zMetricsValueResult,
    zNewKeyholdersResult,
    zNewMembersResult,
    zPayment,
    zPrincipalUser,
    zPrivilege,
    zPrivilegesArray,
    zPrivilegesField,
    zRefreshToken,
    zRevenueByMembersTypes,
    zRevenueByMembership,
    zRevenueResultSet,
    zStripeEvent,
    zSystemPreference,
    zTotalKeyHoldersResult,
    zTotalMembersResult,
    zTrimmedAppClient,
    zTrimmedAppClientOwner,
    zTrimmedUser,
    zUser,
    zUserPrincipal,
    zWebHook
} from '@/lib/validators/records'

import type {
    Boolean,
    DateTime,
    EmailAddress,
    FunctionBoolResultFromStringArraySpread,
    HTTPMethods,
    HumanName,
    IpnValidationStates,
    KeyTypes,
    MoneyBookers,
    NonEmptyStringArray,
    NonNegativeNumber,
    Number,
    NumberArray,
    PasswordField,
    PasswordInput,
    PayPal,
    PaymentProviders,
    PositiveNumber,
    StateRecord,
    String,
    StringArray,
    Stripe,
    StripePaymentStates,
    Url,
    UserActiveStateCodes,
    UserActiveStateDefinition,
    UserActiveStateTitles,
    UserActiveStateType,
    UserActiveStates,
    UserBannedStateType,
    UserInactiveStateType,
    UserPendingStateType,
    UserPin,
    UserStateCodeActive,
    UserStateCodeBanned,
    UserStateCodeInactive,
    UserStateCodePending,
    UserStateTitleActive,
    UserStateTitleBanned,
    UserStateTitleInactive,
    UserStateTitlePending,
    Username
} from '@/types/common'
import type {
    AccessLog,
    AccessToken,
    AppClient,
    AuthCheckResult,
    BasePrivilege,
    Common,
    CurrentUser,
    DataRecord,
    Domain,
    Email,
    EmailTemplate,
    Event,
    GenuineCard,
    IPrincipal,
    Ipn,
    IpnRequest,
    Key,
    Membership,
    MembershipBaseFields,
    MembershipPeriod,
    MembershipPeriodDay,
    MembershipPeriodMonth,
    MembershipPeriodYear,
    MembershipWithId,
    MetricServiceGetCreatedDatesResult,
    MetricServiceGetMembersResult,
    MetricServiceGetRevenueResult,
    MetricServiceGroupTypes,
    MetricsBaseRangeResult,
    MetricsResult,
    MetricsValueResult,
    NewKeyholdersResult,
    NewMembersResult,
    Payment,
    PrincipalUser,
    Privilege,
    PrivilegesArray,
    PrivilegesField,
    RefreshToken,
    RevenueByMembersTypes,
    RevenueByMembership,
    RevenueResultSet,
    StripeEvent,
    SystemPreference,
    TotalKeyHoldersResult,
    TotalMembersResult,
    TrimmedAppClient,
    TrimmedAppClientOwner,
    TrimmedUser,
    User,
    UserPrincipal,
    WebHook
} from '@/types/records'

export const isAccessLog = (inp: unknown): inp is AccessLog => zAccessLog.safeParse(inp).success
export const isAccessToken = (inp: unknown): inp is AccessToken => zAccessToken.safeParse(inp).success
export const isAppClient = (inp: unknown): inp is AppClient => zAppClient.safeParse(inp).success
export const isAuthCheckResult = (inp: unknown): inp is AuthCheckResult => zAuthCheckResult.safeParse(inp).success
export const isBasePrivilege = (inp: unknown): inp is BasePrivilege => zBasePrivilege.safeParse(inp).success
export const isBoolean = (inp: unknown): inp is Boolean => zBoolean.safeParse(inp).success
export const isCommon = (inp: unknown): inp is Common => zCommon.safeParse(inp).success
export const isCurrentUser = (inp: unknown): inp is CurrentUser => zCurrentUser.safeParse(inp).success
export const isDataRecord = (inp: unknown): inp is DataRecord => zDataRecord.safeParse(inp).success
export const isDateTime = (inp: unknown): inp is DateTime => zDateTime.safeParse(inp).success
export const isDomain = (inp: unknown): inp is Domain => zDomain.safeParse(inp).success
export const isEmail = (inp: unknown): inp is Email => zEmail.safeParse(inp).success
export const isEmailAddress = (inp: unknown): inp is EmailAddress => zEmailAddress.safeParse(inp).success
export const isEmailTemplate = (inp: unknown): inp is EmailTemplate => zEmailTemplate.safeParse(inp).success
export const isEvent = (inp: unknown): inp is Event => zEvent.safeParse(inp).success
export const isFunctionBoolResultFromStringArraySpread = (
    inp: unknown
): inp is FunctionBoolResultFromStringArraySpread => zFunctionBoolResultFromStringArraySpread.safeParse(inp).success
export const isGenuineCard = (inp: unknown): inp is GenuineCard => zGenuineCard.safeParse(inp).success
export const isHTTPMethods = (inp: unknown): inp is HTTPMethods => zHTTPMethods.safeParse(inp).success
export const isHumanName = (inp: unknown): inp is HumanName => zHumanName.safeParse(inp).success
export const isIPrincipal = (inp: unknown): inp is IPrincipal => zIPrincipal.safeParse(inp).success
export const isIpn = (inp: unknown): inp is Ipn => zIpn.safeParse(inp).success
export const isIpnRequest = (inp: unknown): inp is IpnRequest => zIpnRequest.safeParse(inp).success
export const isIpnValidationStates = (inp: unknown): inp is IpnValidationStates =>
    zIpnValidationStates.safeParse(inp).success
export const isKey = (inp: unknown): inp is Key => zKey.safeParse(inp).success
export const isKeyTypes = (inp: unknown): inp is KeyTypes => zKeyTypes.safeParse(inp).success
export const isMembership = (inp: unknown): inp is Membership => zMembership.safeParse(inp).success
export const isMembershipBaseFields = (inp: unknown): inp is MembershipBaseFields =>
    zMembershipBaseFields.safeParse(inp).success
export const isMembershipPeriod = (inp: unknown): inp is MembershipPeriod => zMembershipPeriod.safeParse(inp).success
export const isMembershipPeriodDay = (inp: unknown): inp is MembershipPeriodDay =>
    zMembershipPeriodDay.safeParse(inp).success
export const isMembershipPeriodMonth = (inp: unknown): inp is MembershipPeriodMonth =>
    zMembershipPeriodMonth.safeParse(inp).success
export const isMembershipPeriodYear = (inp: unknown): inp is MembershipPeriodYear =>
    zMembershipPeriodYear.safeParse(inp).success
export const isMembershipWithId = (inp: unknown): inp is MembershipWithId => zMembershipWithId.safeParse(inp).success
export const isMetricServiceGetCreatedDatesResult = (inp: unknown): inp is MetricServiceGetCreatedDatesResult =>
    zMetricServiceGetCreatedDatesResult.safeParse(inp).success
export const isMetricServiceGetMembersResult = (inp: unknown): inp is MetricServiceGetMembersResult =>
    zMetricServiceGetMembersResult.safeParse(inp).success
export const isMetricServiceGetRevenueResult = (inp: unknown): inp is MetricServiceGetRevenueResult =>
    zMetricServiceGetRevenueResult.safeParse(inp).success
export const isMetricServiceGroupTypes = (inp: unknown): inp is MetricServiceGroupTypes =>
    zMetricServiceGroupTypes.safeParse(inp).success
export const isMetricsBaseRangeResult = (inp: unknown): inp is MetricsBaseRangeResult =>
    zMetricsBaseRangeResult.safeParse(inp).success
export const isMetricsResult = (inp: unknown): inp is MetricsResult => zMetricsResult.safeParse(inp).success
export const isMetricsValueResult = (inp: unknown): inp is MetricsValueResult =>
    zMetricsValueResult.safeParse(inp).success
export const isMoneyBookers = (inp: unknown): inp is MoneyBookers => zMoneyBookers.safeParse(inp).success
export const isNewKeyholdersResult = (inp: unknown): inp is NewKeyholdersResult =>
    zNewKeyholdersResult.safeParse(inp).success
export const isNewMembersResult = (inp: unknown): inp is NewMembersResult => zNewMembersResult.safeParse(inp).success
export const isNonEmptyStringArray = (inp: unknown): inp is NonEmptyStringArray =>
    zNonEmptyStringArray.safeParse(inp).success
export const isNonNegativeNumber = (inp: unknown): inp is NonNegativeNumber => zNonNegativeNumber.safeParse(inp).success
export const isNumber = (inp: unknown): inp is Number => zNumber.safeParse(inp).success
export const isNumberArray = (inp: unknown): inp is NumberArray => zNumberArray.safeParse(inp).success
export const isPasswordField = (inp: unknown): inp is PasswordField => zPasswordField.safeParse(inp).success
export const isPasswordInput = (inp: unknown): inp is PasswordInput => zPasswordInput.safeParse(inp).success
export const isPayPal = (inp: unknown): inp is PayPal => zPayPal.safeParse(inp).success
export const isPayment = (inp: unknown): inp is Payment => zPayment.safeParse(inp).success
export const isPaymentProviders = (inp: unknown): inp is PaymentProviders => zPaymentProviders.safeParse(inp).success
export const isPositiveNumber = (inp: unknown): inp is PositiveNumber => zPositiveNumber.safeParse(inp).success
export const isPrincipalUser = (inp: unknown): inp is PrincipalUser => zPrincipalUser.safeParse(inp).success
export const isPrivilege = (inp: unknown): inp is Privilege => zPrivilege.safeParse(inp).success
export const isPrivilegesArray = (inp: unknown): inp is PrivilegesArray => zPrivilegesArray.safeParse(inp).success
export const isPrivilegesField = (inp: unknown): inp is PrivilegesField => zPrivilegesField.safeParse(inp).success
export const isRefreshToken = (inp: unknown): inp is RefreshToken => zRefreshToken.safeParse(inp).success
export const isRevenueByMembersTypes = (inp: unknown): inp is RevenueByMembersTypes =>
    zRevenueByMembersTypes.safeParse(inp).success
export const isRevenueByMembership = (inp: unknown): inp is RevenueByMembership =>
    zRevenueByMembership.safeParse(inp).success
export const isRevenueResultSet = (inp: unknown): inp is RevenueResultSet => zRevenueResultSet.safeParse(inp).success
export const isStateRecord = (inp: unknown): inp is StateRecord => zStateRecord.safeParse(inp).success
export const isString = (inp: unknown): inp is String => zString.safeParse(inp).success
export const isStringArray = (inp: unknown): inp is StringArray => zStringArray.safeParse(inp).success
export const isStripe = (inp: unknown): inp is Stripe => zStripe.safeParse(inp).success
export const isStripeEvent = (inp: unknown): inp is StripeEvent => zStripeEvent.safeParse(inp).success
export const isStripePaymentStates = (inp: unknown): inp is StripePaymentStates =>
    zStripePaymentStates.safeParse(inp).success
export const isSystemPreference = (inp: unknown): inp is SystemPreference => zSystemPreference.safeParse(inp).success
export const isTotalKeyHoldersResult = (inp: unknown): inp is TotalKeyHoldersResult =>
    zTotalKeyHoldersResult.safeParse(inp).success
export const isTotalMembersResult = (inp: unknown): inp is TotalMembersResult =>
    zTotalMembersResult.safeParse(inp).success
export const isTrimmedAppClient = (inp: unknown): inp is TrimmedAppClient => zTrimmedAppClient.safeParse(inp).success
export const isTrimmedAppClientOwner = (inp: unknown): inp is TrimmedAppClientOwner =>
    zTrimmedAppClientOwner.safeParse(inp).success
export const isTrimmedUser = (inp: unknown): inp is TrimmedUser => zTrimmedUser.safeParse(inp).success
export const isUrl = (inp: unknown): inp is Url => zUrl.safeParse(inp).success
export const isUser = (inp: unknown): inp is User => zUser.safeParse(inp).success
export const isUserActiveStateCodes = (inp: unknown): inp is UserActiveStateCodes =>
    zUserActiveStateCodes.safeParse(inp).success
export const isUserActiveStateDefinition = (inp: unknown): inp is UserActiveStateDefinition =>
    zUserActiveStateDefinition.safeParse(inp).success
export const isUserActiveStateTitles = (inp: unknown): inp is UserActiveStateTitles =>
    zUserActiveStateTitles.safeParse(inp).success
export const isUserActiveStateType = (inp: unknown): inp is UserActiveStateType =>
    zUserActiveStateType.safeParse(inp).success
export const isUserActiveStates = (inp: unknown): inp is UserActiveStates => zUserActiveStates.safeParse(inp).success
export const isUserBannedStateType = (inp: unknown): inp is UserBannedStateType =>
    zUserBannedStateType.safeParse(inp).success
export const isUserInactiveStateType = (inp: unknown): inp is UserInactiveStateType =>
    zUserInactiveStateType.safeParse(inp).success
export const isUserPendingStateType = (inp: unknown): inp is UserPendingStateType =>
    zUserPendingStateType.safeParse(inp).success
export const isUserPin = (inp: unknown): inp is UserPin => zUserPin.safeParse(inp).success
export const isUserPrincipal = (inp: unknown): inp is UserPrincipal => zUserPrincipal.safeParse(inp).success
export const isUserStateCodeActive = (inp: unknown): inp is UserStateCodeActive =>
    zUserStateCodeActive.safeParse(inp).success
export const isUserStateCodeBanned = (inp: unknown): inp is UserStateCodeBanned =>
    zUserStateCodeBanned.safeParse(inp).success
export const isUserStateCodeInactive = (inp: unknown): inp is UserStateCodeInactive =>
    zUserStateCodeInactive.safeParse(inp).success
export const isUserStateCodePending = (inp: unknown): inp is UserStateCodePending =>
    zUserStateCodePending.safeParse(inp).success
export const isUserStateTitleActive = (inp: unknown): inp is UserStateTitleActive =>
    zUserStateTitleActive.safeParse(inp).success
export const isUserStateTitleBanned = (inp: unknown): inp is UserStateTitleBanned =>
    zUserStateTitleBanned.safeParse(inp).success
export const isUserStateTitleInactive = (inp: unknown): inp is UserStateTitleInactive =>
    zUserStateTitleInactive.safeParse(inp).success
export const isUserStateTitlePending = (inp: unknown): inp is UserStateTitlePending =>
    zUserStateTitlePending.safeParse(inp).success
export const isUsername = (inp: unknown): inp is Username => zUsername.safeParse(inp).success
export const isWebHook = (inp: unknown): inp is WebHook => zWebHook.safeParse(inp).success
