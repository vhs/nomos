// WARNING:
// This file is automatically generated.
// Do not edit manually.

import {
    zBoolean,
    zBooleanRecord,
    zCoerceNumber,
    zCoerceString,
    zDateTime,
    zDateTimeFormInput,
    zDateTimeString,
    zEmailAddress,
    zEmptyOrMinString,
    zFunctionBoolResultFromStringArraySpread,
    zHTTPMethod,
    zHumanName,
    zIpnValidationState,
    zKeyType,
    zMinString,
    zMoneyBookers,
    zNonEmptyStringArray,
    zNonNegativeNumber,
    zNumber,
    zNumberArray,
    zPasswordField,
    zPasswordInput,
    zPayPal,
    zPaymentProvider,
    zPositiveNumber,
    zSpreadString,
    zString,
    zStringArray,
    zStripe,
    zStripePaymentState,
    zUrl,
    zUserActiveState,
    zUserActiveStateCode,
    zUserActiveStateDefinition,
    zUserActiveStateTitle,
    zUserActiveStateType,
    zUserActiveStatus,
    zUserBannedStateType,
    zUserInactiveStateType,
    zUserPendingStateType,
    zUserPin,
    zUserStateCodeActive,
    zUserStateCodeBanned,
    zUserStateCodeInactive,
    zUserStateCodePending,
    zUserStateTitleActive,
    zUserStateTitleBanned,
    zUserStateTitleInactive,
    zUserStateTitlePending,
    zUsername
} from '@/lib/validators/common'
import {
    zAccessLog,
    zAccessToken,
    zAnonPrincipal,
    zAppClient,
    zAuthCheckResult,
    zBasePrivilege,
    zBasePrivilegesArray,
    zCommon,
    zCurrentUser,
    zDataRecord,
    zDomain,
    zEmail,
    zEmailTemplate,
    zEvent,
    zGenuineCard,
    zIPrincipal,
    zIpn,
    zIpnRequest,
    zKey,
    zMembership,
    zMembershipPeriod,
    zMembershipPeriodDay,
    zMembershipPeriodMonth,
    zMembershipPeriodYear,
    zMembershipWithId,
    zMetricServiceBaseRangeResult,
    zMetricServiceGetCreatedDatesResult,
    zMetricServiceGetMembersResult,
    zMetricServiceGetRevenueResult,
    zMetricServiceGroupType,
    zMetricServiceNewKeyholdersResult,
    zMetricServiceNewMembersResult,
    zMetricServiceResult,
    zMetricServiceRevenueByMembership,
    zMetricServiceRevenueResultSet,
    zMetricServiceTotalKeyHoldersResult,
    zMetricServiceTotalMembersResult,
    zMetricServiceValueResult,
    zPayment,
    zPrincipalUser,
    zPrivilege,
    zPrivilegesArray,
    zPrivilegesField,
    zRefreshToken,
    zRevenueByMembersType,
    zStripeEvent,
    zSystemPreference,
    zTrimmedAppClient,
    zTrimmedAppClientOwner,
    zTrimmedUser,
    zUser,
    zUserPrincipal,
    zWebHook
} from '@/lib/validators/records'

import type {
    Boolean,
    Booleans,
    BooleanRecord,
    BooleanRecords,
    CoerceNumber,
    CoerceNumbers,
    CoerceString,
    CoerceStrings,
    DateTime,
    DateTimes,
    DateTimeFormInput,
    DateTimeFormInputs,
    DateTimeString,
    DateTimeStrings,
    EmailAddress,
    EmptyOrMinString,
    EmptyOrMinStrings,
    FunctionBoolResultFromStringArraySpread,
    FunctionBoolResultFromStringArraySpreads,
    HTTPMethod,
    HTTPMethods,
    HumanName,
    HumanNames,
    IpnValidationState,
    IpnValidationStates,
    KeyType,
    KeyTypes,
    MinString,
    MinStrings,
    MoneyBookers,
    NonEmptyStringArray,
    NonEmptyStringArrays,
    NonNegativeNumber,
    NonNegativeNumbers,
    Number,
    Numbers,
    NumberArray,
    NumberArrays,
    PasswordField,
    PasswordFields,
    PasswordInput,
    PasswordInputs,
    PayPal,
    PayPals,
    PaymentProvider,
    PaymentProviders,
    PositiveNumber,
    PositiveNumbers,
    SpreadString,
    SpreadStrings,
    String,
    Strings,
    StringArray,
    StringArrays,
    Stripe,
    Stripes,
    StripePaymentState,
    StripePaymentStates,
    Url,
    Urls,
    UserActiveState,
    UserActiveStates,
    UserActiveStateCode,
    UserActiveStateCodes,
    UserActiveStateDefinition,
    UserActiveStateDefinitions,
    UserActiveStateTitle,
    UserActiveStateTitles,
    UserActiveStateType,
    UserActiveStateTypes,
    UserActiveStatus,
    UserBannedStateType,
    UserBannedStateTypes,
    UserInactiveStateType,
    UserInactiveStateTypes,
    UserPendingStateType,
    UserPendingStateTypes,
    UserPin,
    UserPins,
    UserStateCodeActive,
    UserStateCodeActives,
    UserStateCodeBanned,
    UserStateCodeBanneds,
    UserStateCodeInactive,
    UserStateCodeInactives,
    UserStateCodePending,
    UserStateCodePendings,
    UserStateTitleActive,
    UserStateTitleActives,
    UserStateTitleBanned,
    UserStateTitleBanneds,
    UserStateTitleInactive,
    UserStateTitleInactives,
    UserStateTitlePending,
    UserStateTitlePendings,
    Username,
    Usernames
} from '@/types/validators/common'
import type {
    AccessLog,
    AccessLogs,
    AccessToken,
    AccessTokens,
    AnonPrincipal,
    AnonPrincipals,
    AppClient,
    AppClients,
    AuthCheckResult,
    AuthCheckResults,
    BasePrivilege,
    BasePrivileges,
    BasePrivilegesArray,
    BasePrivilegesArrays,
    Common,
    Commons,
    CurrentUser,
    CurrentUsers,
    DataRecord,
    DataRecords,
    Domain,
    Domains,
    Email,
    Emails,
    EmailTemplate,
    EmailTemplates,
    Event,
    Events,
    GenuineCard,
    GenuineCards,
    IPrincipal,
    IPrincipals,
    Ipn,
    Ipns,
    IpnRequest,
    IpnRequests,
    Key,
    Keys,
    Membership,
    Memberships,
    MembershipPeriod,
    MembershipPeriods,
    MembershipPeriodDay,
    MembershipPeriodDays,
    MembershipPeriodMonth,
    MembershipPeriodMonths,
    MembershipPeriodYear,
    MembershipPeriodYears,
    MembershipWithId,
    MembershipWithIds,
    MetricServiceBaseRangeResult,
    MetricServiceBaseRangeResults,
    MetricServiceGetCreatedDatesResult,
    MetricServiceGetCreatedDatesResults,
    MetricServiceGetMembersResult,
    MetricServiceGetMembersResults,
    MetricServiceGetRevenueResult,
    MetricServiceGetRevenueResults,
    MetricServiceGroupType,
    MetricServiceGroupTypes,
    MetricServiceNewKeyholdersResult,
    MetricServiceNewKeyholdersResults,
    MetricServiceNewMembersResult,
    MetricServiceNewMembersResults,
    MetricServiceResult,
    MetricServiceResults,
    MetricServiceRevenueByMembership,
    MetricServiceRevenueByMemberships,
    MetricServiceRevenueResultSet,
    MetricServiceRevenueResultSets,
    MetricServiceTotalKeyHoldersResult,
    MetricServiceTotalKeyHoldersResults,
    MetricServiceTotalMembersResult,
    MetricServiceTotalMembersResults,
    MetricServiceValueResult,
    MetricServiceValueResults,
    Payment,
    Payments,
    PrincipalUser,
    PrincipalUsers,
    Privilege,
    Privileges,
    PrivilegesArray,
    PrivilegesArrays,
    PrivilegesField,
    PrivilegesFields,
    RefreshToken,
    RefreshTokens,
    RevenueByMembersType,
    RevenueByMembersTypes,
    StripeEvent,
    StripeEvents,
    SystemPreference,
    SystemPreferences,
    TrimmedAppClient,
    TrimmedAppClients,
    TrimmedAppClientOwner,
    TrimmedAppClientOwners,
    TrimmedUser,
    TrimmedUsers,
    User,
    Users,
    UserPrincipal,
    UserPrincipals,
    WebHook,
    WebHooks
} from '@/types/validators/records'

export const isAccessLog = (inp: unknown): inp is AccessLog => zAccessLog.safeParse(inp).success
export const isAccessLogs = (inp: unknown): inp is AccessLogs => zAccessLog.array().safeParse(inp).success

export const isAccessToken = (inp: unknown): inp is AccessToken => zAccessToken.safeParse(inp).success
export const isAccessTokens = (inp: unknown): inp is AccessTokens => zAccessToken.array().safeParse(inp).success

export const isAnonPrincipal = (inp: unknown): inp is AnonPrincipal => zAnonPrincipal.safeParse(inp).success
export const isAnonPrincipals = (inp: unknown): inp is AnonPrincipals => zAnonPrincipal.array().safeParse(inp).success

export const isAppClient = (inp: unknown): inp is AppClient => zAppClient.safeParse(inp).success
export const isAppClients = (inp: unknown): inp is AppClients => zAppClient.array().safeParse(inp).success

export const isAuthCheckResult = (inp: unknown): inp is AuthCheckResult => zAuthCheckResult.safeParse(inp).success
export const isAuthCheckResults = (inp: unknown): inp is AuthCheckResults =>
    zAuthCheckResult.array().safeParse(inp).success

export const isBasePrivilege = (inp: unknown): inp is BasePrivilege => zBasePrivilege.safeParse(inp).success
export const isBasePrivileges = (inp: unknown): inp is BasePrivileges => zBasePrivilege.array().safeParse(inp).success

export const isBasePrivilegesArray = (inp: unknown): inp is BasePrivilegesArray =>
    zBasePrivilegesArray.safeParse(inp).success
export const isBasePrivilegesArrays = (inp: unknown): inp is BasePrivilegesArrays =>
    zBasePrivilegesArray.array().safeParse(inp).success

export const isBoolean = (inp: unknown): inp is Boolean => zBoolean.safeParse(inp).success
export const isBooleans = (inp: unknown): inp is Booleans => zBoolean.array().safeParse(inp).success

export const isBooleanRecord = (inp: unknown): inp is BooleanRecord => zBooleanRecord.safeParse(inp).success
export const isBooleanRecords = (inp: unknown): inp is BooleanRecords => zBooleanRecord.array().safeParse(inp).success

export const isCoerceNumber = (inp: unknown): inp is CoerceNumber => zCoerceNumber.safeParse(inp).success
export const isCoerceNumbers = (inp: unknown): inp is CoerceNumbers => zCoerceNumber.array().safeParse(inp).success

export const isCoerceString = (inp: unknown): inp is CoerceString => zCoerceString.safeParse(inp).success
export const isCoerceStrings = (inp: unknown): inp is CoerceStrings => zCoerceString.array().safeParse(inp).success

export const isCommon = (inp: unknown): inp is Common => zCommon.safeParse(inp).success
export const isCommons = (inp: unknown): inp is Commons => zCommon.array().safeParse(inp).success

export const isCurrentUser = (inp: unknown): inp is CurrentUser => zCurrentUser.safeParse(inp).success
export const isCurrentUsers = (inp: unknown): inp is CurrentUsers => zCurrentUser.array().safeParse(inp).success

export const isDataRecord = (inp: unknown): inp is DataRecord => zDataRecord.safeParse(inp).success
export const isDataRecords = (inp: unknown): inp is DataRecords => zDataRecord.array().safeParse(inp).success

export const isDateTime = (inp: unknown): inp is DateTime => zDateTime.safeParse(inp).success
export const isDateTimes = (inp: unknown): inp is DateTimes => zDateTime.array().safeParse(inp).success

export const isDateTimeFormInput = (inp: unknown): inp is DateTimeFormInput => zDateTimeFormInput.safeParse(inp).success
export const isDateTimeFormInputs = (inp: unknown): inp is DateTimeFormInputs =>
    zDateTimeFormInput.array().safeParse(inp).success

export const isDateTimeString = (inp: unknown): inp is DateTimeString => zDateTimeString.safeParse(inp).success
export const isDateTimeStrings = (inp: unknown): inp is DateTimeStrings =>
    zDateTimeString.array().safeParse(inp).success

export const isDomain = (inp: unknown): inp is Domain => zDomain.safeParse(inp).success
export const isDomains = (inp: unknown): inp is Domains => zDomain.array().safeParse(inp).success

export const isEmail = (inp: unknown): inp is Email => zEmail.safeParse(inp).success
export const isEmails = (inp: unknown): inp is Emails => zEmail.array().safeParse(inp).success

export const isEmailAddress = (inp: unknown): inp is EmailAddress => zEmailAddress.safeParse(inp).success

export const isEmailTemplate = (inp: unknown): inp is EmailTemplate => zEmailTemplate.safeParse(inp).success
export const isEmailTemplates = (inp: unknown): inp is EmailTemplates => zEmailTemplate.array().safeParse(inp).success

export const isEmptyOrMinString = (inp: unknown): inp is EmptyOrMinString => zEmptyOrMinString.safeParse(inp).success
export const isEmptyOrMinStrings = (inp: unknown): inp is EmptyOrMinStrings =>
    zEmptyOrMinString.array().safeParse(inp).success

export const isEvent = (inp: unknown): inp is Event => zEvent.safeParse(inp).success
export const isEvents = (inp: unknown): inp is Events => zEvent.array().safeParse(inp).success

export const isFunctionBoolResultFromStringArraySpread = (
    inp: unknown
): inp is FunctionBoolResultFromStringArraySpread => zFunctionBoolResultFromStringArraySpread.safeParse(inp).success
export const isFunctionBoolResultFromStringArraySpreads = (
    inp: unknown
): inp is FunctionBoolResultFromStringArraySpreads =>
    zFunctionBoolResultFromStringArraySpread.array().safeParse(inp).success

export const isGenuineCard = (inp: unknown): inp is GenuineCard => zGenuineCard.safeParse(inp).success
export const isGenuineCards = (inp: unknown): inp is GenuineCards => zGenuineCard.array().safeParse(inp).success

export const isHTTPMethod = (inp: unknown): inp is HTTPMethod => zHTTPMethod.safeParse(inp).success
export const isHTTPMethods = (inp: unknown): inp is HTTPMethods => zHTTPMethod.array().safeParse(inp).success

export const isHumanName = (inp: unknown): inp is HumanName => zHumanName.safeParse(inp).success
export const isHumanNames = (inp: unknown): inp is HumanNames => zHumanName.array().safeParse(inp).success

export const isIPrincipal = (inp: unknown): inp is IPrincipal => zIPrincipal.safeParse(inp).success
export const isIPrincipals = (inp: unknown): inp is IPrincipals => zIPrincipal.array().safeParse(inp).success

export const isIpn = (inp: unknown): inp is Ipn => zIpn.safeParse(inp).success
export const isIpns = (inp: unknown): inp is Ipns => zIpn.array().safeParse(inp).success

export const isIpnRequest = (inp: unknown): inp is IpnRequest => zIpnRequest.safeParse(inp).success
export const isIpnRequests = (inp: unknown): inp is IpnRequests => zIpnRequest.array().safeParse(inp).success

export const isIpnValidationState = (inp: unknown): inp is IpnValidationState =>
    zIpnValidationState.safeParse(inp).success
export const isIpnValidationStates = (inp: unknown): inp is IpnValidationStates =>
    zIpnValidationState.array().safeParse(inp).success

export const isKey = (inp: unknown): inp is Key => zKey.safeParse(inp).success
export const isKeys = (inp: unknown): inp is Keys => zKey.array().safeParse(inp).success

export const isKeyType = (inp: unknown): inp is KeyType => zKeyType.safeParse(inp).success
export const isKeyTypes = (inp: unknown): inp is KeyTypes => zKeyType.array().safeParse(inp).success

export const isMembership = (inp: unknown): inp is Membership => zMembership.safeParse(inp).success
export const isMemberships = (inp: unknown): inp is Memberships => zMembership.array().safeParse(inp).success

export const isMembershipPeriod = (inp: unknown): inp is MembershipPeriod => zMembershipPeriod.safeParse(inp).success
export const isMembershipPeriods = (inp: unknown): inp is MembershipPeriods =>
    zMembershipPeriod.array().safeParse(inp).success

export const isMembershipPeriodDay = (inp: unknown): inp is MembershipPeriodDay =>
    zMembershipPeriodDay.safeParse(inp).success
export const isMembershipPeriodDays = (inp: unknown): inp is MembershipPeriodDays =>
    zMembershipPeriodDay.array().safeParse(inp).success

export const isMembershipPeriodMonth = (inp: unknown): inp is MembershipPeriodMonth =>
    zMembershipPeriodMonth.safeParse(inp).success
export const isMembershipPeriodMonths = (inp: unknown): inp is MembershipPeriodMonths =>
    zMembershipPeriodMonth.array().safeParse(inp).success

export const isMembershipPeriodYear = (inp: unknown): inp is MembershipPeriodYear =>
    zMembershipPeriodYear.safeParse(inp).success
export const isMembershipPeriodYears = (inp: unknown): inp is MembershipPeriodYears =>
    zMembershipPeriodYear.array().safeParse(inp).success

export const isMembershipWithId = (inp: unknown): inp is MembershipWithId => zMembershipWithId.safeParse(inp).success
export const isMembershipWithIds = (inp: unknown): inp is MembershipWithIds =>
    zMembershipWithId.array().safeParse(inp).success

export const isMetricServiceBaseRangeResult = (inp: unknown): inp is MetricServiceBaseRangeResult =>
    zMetricServiceBaseRangeResult.safeParse(inp).success
export const isMetricServiceBaseRangeResults = (inp: unknown): inp is MetricServiceBaseRangeResults =>
    zMetricServiceBaseRangeResult.array().safeParse(inp).success

export const isMetricServiceGetCreatedDatesResult = (inp: unknown): inp is MetricServiceGetCreatedDatesResult =>
    zMetricServiceGetCreatedDatesResult.safeParse(inp).success
export const isMetricServiceGetCreatedDatesResults = (inp: unknown): inp is MetricServiceGetCreatedDatesResults =>
    zMetricServiceGetCreatedDatesResult.array().safeParse(inp).success

export const isMetricServiceGetMembersResult = (inp: unknown): inp is MetricServiceGetMembersResult =>
    zMetricServiceGetMembersResult.safeParse(inp).success
export const isMetricServiceGetMembersResults = (inp: unknown): inp is MetricServiceGetMembersResults =>
    zMetricServiceGetMembersResult.array().safeParse(inp).success

export const isMetricServiceGetRevenueResult = (inp: unknown): inp is MetricServiceGetRevenueResult =>
    zMetricServiceGetRevenueResult.safeParse(inp).success
export const isMetricServiceGetRevenueResults = (inp: unknown): inp is MetricServiceGetRevenueResults =>
    zMetricServiceGetRevenueResult.array().safeParse(inp).success

export const isMetricServiceGroupType = (inp: unknown): inp is MetricServiceGroupType =>
    zMetricServiceGroupType.safeParse(inp).success
export const isMetricServiceGroupTypes = (inp: unknown): inp is MetricServiceGroupTypes =>
    zMetricServiceGroupType.array().safeParse(inp).success

export const isMetricServiceNewKeyholdersResult = (inp: unknown): inp is MetricServiceNewKeyholdersResult =>
    zMetricServiceNewKeyholdersResult.safeParse(inp).success
export const isMetricServiceNewKeyholdersResults = (inp: unknown): inp is MetricServiceNewKeyholdersResults =>
    zMetricServiceNewKeyholdersResult.array().safeParse(inp).success

export const isMetricServiceNewMembersResult = (inp: unknown): inp is MetricServiceNewMembersResult =>
    zMetricServiceNewMembersResult.safeParse(inp).success
export const isMetricServiceNewMembersResults = (inp: unknown): inp is MetricServiceNewMembersResults =>
    zMetricServiceNewMembersResult.array().safeParse(inp).success

export const isMetricServiceResult = (inp: unknown): inp is MetricServiceResult =>
    zMetricServiceResult.safeParse(inp).success
export const isMetricServiceResults = (inp: unknown): inp is MetricServiceResults =>
    zMetricServiceResult.array().safeParse(inp).success

export const isMetricServiceRevenueByMembership = (inp: unknown): inp is MetricServiceRevenueByMembership =>
    zMetricServiceRevenueByMembership.safeParse(inp).success
export const isMetricServiceRevenueByMemberships = (inp: unknown): inp is MetricServiceRevenueByMemberships =>
    zMetricServiceRevenueByMembership.array().safeParse(inp).success

export const isMetricServiceRevenueResultSet = (inp: unknown): inp is MetricServiceRevenueResultSet =>
    zMetricServiceRevenueResultSet.safeParse(inp).success
export const isMetricServiceRevenueResultSets = (inp: unknown): inp is MetricServiceRevenueResultSets =>
    zMetricServiceRevenueResultSet.array().safeParse(inp).success

export const isMetricServiceTotalKeyHoldersResult = (inp: unknown): inp is MetricServiceTotalKeyHoldersResult =>
    zMetricServiceTotalKeyHoldersResult.safeParse(inp).success
export const isMetricServiceTotalKeyHoldersResults = (inp: unknown): inp is MetricServiceTotalKeyHoldersResults =>
    zMetricServiceTotalKeyHoldersResult.array().safeParse(inp).success

export const isMetricServiceTotalMembersResult = (inp: unknown): inp is MetricServiceTotalMembersResult =>
    zMetricServiceTotalMembersResult.safeParse(inp).success
export const isMetricServiceTotalMembersResults = (inp: unknown): inp is MetricServiceTotalMembersResults =>
    zMetricServiceTotalMembersResult.array().safeParse(inp).success

export const isMetricServiceValueResult = (inp: unknown): inp is MetricServiceValueResult =>
    zMetricServiceValueResult.safeParse(inp).success
export const isMetricServiceValueResults = (inp: unknown): inp is MetricServiceValueResults =>
    zMetricServiceValueResult.array().safeParse(inp).success

export const isMinString = (inp: unknown): inp is MinString => zMinString.safeParse(inp).success
export const isMinStrings = (inp: unknown): inp is MinStrings => zMinString.array().safeParse(inp).success

export const isMoneyBookers = (inp: unknown): inp is MoneyBookers => zMoneyBookers.safeParse(inp).success

export const isNonEmptyStringArray = (inp: unknown): inp is NonEmptyStringArray =>
    zNonEmptyStringArray.safeParse(inp).success
export const isNonEmptyStringArrays = (inp: unknown): inp is NonEmptyStringArrays =>
    zNonEmptyStringArray.array().safeParse(inp).success

export const isNonNegativeNumber = (inp: unknown): inp is NonNegativeNumber => zNonNegativeNumber.safeParse(inp).success
export const isNonNegativeNumbers = (inp: unknown): inp is NonNegativeNumbers =>
    zNonNegativeNumber.array().safeParse(inp).success

export const isNumber = (inp: unknown): inp is Number => zNumber.safeParse(inp).success
export const isNumbers = (inp: unknown): inp is Numbers => zNumber.array().safeParse(inp).success

export const isNumberArray = (inp: unknown): inp is NumberArray => zNumberArray.safeParse(inp).success
export const isNumberArrays = (inp: unknown): inp is NumberArrays => zNumberArray.array().safeParse(inp).success

export const isPasswordField = (inp: unknown): inp is PasswordField => zPasswordField.safeParse(inp).success
export const isPasswordFields = (inp: unknown): inp is PasswordFields => zPasswordField.array().safeParse(inp).success

export const isPasswordInput = (inp: unknown): inp is PasswordInput => zPasswordInput.safeParse(inp).success
export const isPasswordInputs = (inp: unknown): inp is PasswordInputs => zPasswordInput.array().safeParse(inp).success

export const isPayPal = (inp: unknown): inp is PayPal => zPayPal.safeParse(inp).success
export const isPayPals = (inp: unknown): inp is PayPals => zPayPal.array().safeParse(inp).success

export const isPayment = (inp: unknown): inp is Payment => zPayment.safeParse(inp).success
export const isPayments = (inp: unknown): inp is Payments => zPayment.array().safeParse(inp).success

export const isPaymentProvider = (inp: unknown): inp is PaymentProvider => zPaymentProvider.safeParse(inp).success
export const isPaymentProviders = (inp: unknown): inp is PaymentProviders =>
    zPaymentProvider.array().safeParse(inp).success

export const isPositiveNumber = (inp: unknown): inp is PositiveNumber => zPositiveNumber.safeParse(inp).success
export const isPositiveNumbers = (inp: unknown): inp is PositiveNumbers =>
    zPositiveNumber.array().safeParse(inp).success

export const isPrincipalUser = (inp: unknown): inp is PrincipalUser => zPrincipalUser.safeParse(inp).success
export const isPrincipalUsers = (inp: unknown): inp is PrincipalUsers => zPrincipalUser.array().safeParse(inp).success

export const isPrivilege = (inp: unknown): inp is Privilege => zPrivilege.safeParse(inp).success
export const isPrivileges = (inp: unknown): inp is Privileges => zPrivilege.array().safeParse(inp).success

export const isPrivilegesArray = (inp: unknown): inp is PrivilegesArray => zPrivilegesArray.safeParse(inp).success
export const isPrivilegesArrays = (inp: unknown): inp is PrivilegesArrays =>
    zPrivilegesArray.array().safeParse(inp).success

export const isPrivilegesField = (inp: unknown): inp is PrivilegesField => zPrivilegesField.safeParse(inp).success
export const isPrivilegesFields = (inp: unknown): inp is PrivilegesFields =>
    zPrivilegesField.array().safeParse(inp).success

export const isRefreshToken = (inp: unknown): inp is RefreshToken => zRefreshToken.safeParse(inp).success
export const isRefreshTokens = (inp: unknown): inp is RefreshTokens => zRefreshToken.array().safeParse(inp).success

export const isRevenueByMembersType = (inp: unknown): inp is RevenueByMembersType =>
    zRevenueByMembersType.safeParse(inp).success
export const isRevenueByMembersTypes = (inp: unknown): inp is RevenueByMembersTypes =>
    zRevenueByMembersType.array().safeParse(inp).success

export const isSpreadString = (inp: unknown): inp is SpreadString => zSpreadString.safeParse(inp).success
export const isSpreadStrings = (inp: unknown): inp is SpreadStrings => zSpreadString.array().safeParse(inp).success

export const isString = (inp: unknown): inp is String => zString.safeParse(inp).success
export const isStrings = (inp: unknown): inp is Strings => zString.array().safeParse(inp).success

export const isStringArray = (inp: unknown): inp is StringArray => zStringArray.safeParse(inp).success
export const isStringArrays = (inp: unknown): inp is StringArrays => zStringArray.array().safeParse(inp).success

export const isStripe = (inp: unknown): inp is Stripe => zStripe.safeParse(inp).success
export const isStripes = (inp: unknown): inp is Stripes => zStripe.array().safeParse(inp).success

export const isStripeEvent = (inp: unknown): inp is StripeEvent => zStripeEvent.safeParse(inp).success
export const isStripeEvents = (inp: unknown): inp is StripeEvents => zStripeEvent.array().safeParse(inp).success

export const isStripePaymentState = (inp: unknown): inp is StripePaymentState =>
    zStripePaymentState.safeParse(inp).success
export const isStripePaymentStates = (inp: unknown): inp is StripePaymentStates =>
    zStripePaymentState.array().safeParse(inp).success

export const isSystemPreference = (inp: unknown): inp is SystemPreference => zSystemPreference.safeParse(inp).success
export const isSystemPreferences = (inp: unknown): inp is SystemPreferences =>
    zSystemPreference.array().safeParse(inp).success

export const isTrimmedAppClient = (inp: unknown): inp is TrimmedAppClient => zTrimmedAppClient.safeParse(inp).success
export const isTrimmedAppClients = (inp: unknown): inp is TrimmedAppClients =>
    zTrimmedAppClient.array().safeParse(inp).success

export const isTrimmedAppClientOwner = (inp: unknown): inp is TrimmedAppClientOwner =>
    zTrimmedAppClientOwner.safeParse(inp).success
export const isTrimmedAppClientOwners = (inp: unknown): inp is TrimmedAppClientOwners =>
    zTrimmedAppClientOwner.array().safeParse(inp).success

export const isTrimmedUser = (inp: unknown): inp is TrimmedUser => zTrimmedUser.safeParse(inp).success
export const isTrimmedUsers = (inp: unknown): inp is TrimmedUsers => zTrimmedUser.array().safeParse(inp).success

export const isUrl = (inp: unknown): inp is Url => zUrl.safeParse(inp).success
export const isUrls = (inp: unknown): inp is Urls => zUrl.array().safeParse(inp).success

export const isUser = (inp: unknown): inp is User => zUser.safeParse(inp).success
export const isUsers = (inp: unknown): inp is Users => zUser.array().safeParse(inp).success

export const isUserActiveState = (inp: unknown): inp is UserActiveState => zUserActiveState.safeParse(inp).success
export const isUserActiveStates = (inp: unknown): inp is UserActiveStates =>
    zUserActiveState.array().safeParse(inp).success

export const isUserActiveStateCode = (inp: unknown): inp is UserActiveStateCode =>
    zUserActiveStateCode.safeParse(inp).success
export const isUserActiveStateCodes = (inp: unknown): inp is UserActiveStateCodes =>
    zUserActiveStateCode.array().safeParse(inp).success

export const isUserActiveStateDefinition = (inp: unknown): inp is UserActiveStateDefinition =>
    zUserActiveStateDefinition.safeParse(inp).success
export const isUserActiveStateDefinitions = (inp: unknown): inp is UserActiveStateDefinitions =>
    zUserActiveStateDefinition.array().safeParse(inp).success

export const isUserActiveStateTitle = (inp: unknown): inp is UserActiveStateTitle =>
    zUserActiveStateTitle.safeParse(inp).success
export const isUserActiveStateTitles = (inp: unknown): inp is UserActiveStateTitles =>
    zUserActiveStateTitle.array().safeParse(inp).success

export const isUserActiveStateType = (inp: unknown): inp is UserActiveStateType =>
    zUserActiveStateType.safeParse(inp).success
export const isUserActiveStateTypes = (inp: unknown): inp is UserActiveStateTypes =>
    zUserActiveStateType.array().safeParse(inp).success

export const isUserActiveStatus = (inp: unknown): inp is UserActiveStatus => zUserActiveStatus.safeParse(inp).success

export const isUserBannedStateType = (inp: unknown): inp is UserBannedStateType =>
    zUserBannedStateType.safeParse(inp).success
export const isUserBannedStateTypes = (inp: unknown): inp is UserBannedStateTypes =>
    zUserBannedStateType.array().safeParse(inp).success

export const isUserInactiveStateType = (inp: unknown): inp is UserInactiveStateType =>
    zUserInactiveStateType.safeParse(inp).success
export const isUserInactiveStateTypes = (inp: unknown): inp is UserInactiveStateTypes =>
    zUserInactiveStateType.array().safeParse(inp).success

export const isUserPendingStateType = (inp: unknown): inp is UserPendingStateType =>
    zUserPendingStateType.safeParse(inp).success
export const isUserPendingStateTypes = (inp: unknown): inp is UserPendingStateTypes =>
    zUserPendingStateType.array().safeParse(inp).success

export const isUserPin = (inp: unknown): inp is UserPin => zUserPin.safeParse(inp).success
export const isUserPins = (inp: unknown): inp is UserPins => zUserPin.array().safeParse(inp).success

export const isUserPrincipal = (inp: unknown): inp is UserPrincipal => zUserPrincipal.safeParse(inp).success
export const isUserPrincipals = (inp: unknown): inp is UserPrincipals => zUserPrincipal.array().safeParse(inp).success

export const isUserStateCodeActive = (inp: unknown): inp is UserStateCodeActive =>
    zUserStateCodeActive.safeParse(inp).success
export const isUserStateCodeActives = (inp: unknown): inp is UserStateCodeActives =>
    zUserStateCodeActive.array().safeParse(inp).success

export const isUserStateCodeBanned = (inp: unknown): inp is UserStateCodeBanned =>
    zUserStateCodeBanned.safeParse(inp).success
export const isUserStateCodeBanneds = (inp: unknown): inp is UserStateCodeBanneds =>
    zUserStateCodeBanned.array().safeParse(inp).success

export const isUserStateCodeInactive = (inp: unknown): inp is UserStateCodeInactive =>
    zUserStateCodeInactive.safeParse(inp).success
export const isUserStateCodeInactives = (inp: unknown): inp is UserStateCodeInactives =>
    zUserStateCodeInactive.array().safeParse(inp).success

export const isUserStateCodePending = (inp: unknown): inp is UserStateCodePending =>
    zUserStateCodePending.safeParse(inp).success
export const isUserStateCodePendings = (inp: unknown): inp is UserStateCodePendings =>
    zUserStateCodePending.array().safeParse(inp).success

export const isUserStateTitleActive = (inp: unknown): inp is UserStateTitleActive =>
    zUserStateTitleActive.safeParse(inp).success
export const isUserStateTitleActives = (inp: unknown): inp is UserStateTitleActives =>
    zUserStateTitleActive.array().safeParse(inp).success

export const isUserStateTitleBanned = (inp: unknown): inp is UserStateTitleBanned =>
    zUserStateTitleBanned.safeParse(inp).success
export const isUserStateTitleBanneds = (inp: unknown): inp is UserStateTitleBanneds =>
    zUserStateTitleBanned.array().safeParse(inp).success

export const isUserStateTitleInactive = (inp: unknown): inp is UserStateTitleInactive =>
    zUserStateTitleInactive.safeParse(inp).success
export const isUserStateTitleInactives = (inp: unknown): inp is UserStateTitleInactives =>
    zUserStateTitleInactive.array().safeParse(inp).success

export const isUserStateTitlePending = (inp: unknown): inp is UserStateTitlePending =>
    zUserStateTitlePending.safeParse(inp).success
export const isUserStateTitlePendings = (inp: unknown): inp is UserStateTitlePendings =>
    zUserStateTitlePending.array().safeParse(inp).success

export const isUsername = (inp: unknown): inp is Username => zUsername.safeParse(inp).success
export const isUsernames = (inp: unknown): inp is Usernames => zUsername.array().safeParse(inp).success

export const isWebHook = (inp: unknown): inp is WebHook => zWebHook.safeParse(inp).success
export const isWebHooks = (inp: unknown): inp is WebHooks => zWebHook.array().safeParse(inp).success
